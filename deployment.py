# -*- coding: utf-8 -*-
"""
Created on Thu Jun 30 11:59:37 2022

@author: CG-DTE
"""

from sklearn.model_selection import train_test_split
import joblib,os
from pickle import load
import plotly_express as px
import matplotlib as plt
import pandas as pd
import streamlit as st 
import xgboost as xgb
import warnings
warnings.filterwarnings('ignore')


st.sidebar.header('USER MANUAL')
menu=["Home",'Prediction',"Data Analysis",'About']
mode= st.sidebar.selectbox("Menu",menu)

def user_input_features():
    TEMPERATURE = st.sidebar.slider('TEMPERATURE(Degrees)',1.81,37.11,step=0.1,)
    EXHAUST_VACUUM = st.sidebar.slider('EXHAUST_VACUUM(cm Hg) ',25.36,81.56,step=0.1)
    AMBIENT_PRESSURE= st.sidebar.slider('AMBIENT_PRESSURE(mb)',992.89,1033.3,step=0.1)
    RELATIVE_HUMIDITY=st.sidebar.slider('RELATIVE_HUMIDITY(%)',25.56,100.16,step=0.1)
    data = {
            'temperature ':TEMPERATURE ,
            'exhaust_vacuum': EXHAUST_VACUUM,
            ' amb_pressure':AMBIENT_PRESSURE,
            'r_humidity': RELATIVE_HUMIDITY}
    features = pd.DataFrame(data,index=[1])
    features.columns
    return features 

if mode=="Home":
    st.title('COMBINED-CYCLE POWER PLANT')
    html_temp = """
    <div style="background-color:tomato;padding:10px">
    <h2 style="color:white;text-align:center;">ENERGY PRODUCTION </h2>
    </div>
    """
    st.markdown(html_temp,unsafe_allow_html=True)
    st.header("Welcome to Energy Production Prediction")
    image="https://internationalfinance.com/wp-content/uploads/2020/01/Indonesia-renewable-energy-IFM.jpg"
    st.image(image)
    
if mode=="Prediction":
    st.title('COMBINED-CYCLE POWER PLANT')
    image="https://media0.giphy.com/media/9floxejD0yczwuZMLJ/giphy.gif?cid=ecf05e471ne9srkmabvq4j988mvqvmy3xur1w6jcuq545ie7&rid=giphy.gif&ct=g"
    st.image(image)
    st.write('* **BUSSINESS OBJECTIVE :**')
    st.write('''
*A combined-cycle power plant comprises gas turbines, steam turbines, And heat recovery steam generators. In this type of plant, the electricity is generated by gas and steam turbines combined in one cycle. Then, it is transferred from one turbine to another. We have to model the energy generated as a function of exhaust vacuum and ambient variables and use that model to improve the plant's performance*.
''')
    
    st.subheader("FEATURES")
    df=user_input_features()
    st.subheader('User Input parameters')
    st.write(df)
    dt = pd.read_csv('energy_productioncleaned.csv')
    dt.rename({'temperature':'TEMPERATURE','exhaust_vacuum':'EXHAUST_VACUUM','amb_pressure':'AMBIENT_PRESSURE','r_humidity':'RELATIVE_HUMIDITY','energy_production':'ENERGY_PRODUCTION'},inplace=True,axis = 1)
    X = dt.iloc[:,:4]
    Y = dt['ENERGY_PRODUCTION']
    X_train,X_test, Y_train, Y_test  = train_test_split(X,Y, test_size = 0.20, random_state = 100)
    XGB=xgb.XGBRegressor(n_estimators=100,eta=0.001,gamma=10,learning_rate=0.5)
    XGB.fit(X,Y)
    prediction = XGB.predict(df)
    if st.button('predict'):
        st.subheader('Energy production Predicted')
        st.info(XGB.predict(df).round(2))

    
if mode == 'Data Analysis':
	st.subheader(' **Data Set:**')
	uploaded_file = st.sidebar.file_uploader("Choose a file")
	if uploaded_file is not None:
		df = pd.read_csv(uploaded_file)
		st.write(df)
		global numeric_columns
		global non_numeric_columns
		try:
			numeric_columns = list(df.select_dtypes(['int', 'float']).columns)
			non_numeric_columns = list(df.select_dtypes(['object']).columns)
			non_numeric_columns.append(None)
			print(non_numeric_columns)
		except Exception as e:
			print(e)
         
if mode == 'Data Analysis':
    st.subheader(' **Plots :**')
    chart_select = st.sidebar.selectbox(label="Select the chart type",options=['Select','Scatterplots', 'Lineplots', 'Histogram'])
    if chart_select == 'Scatterplots':
    	st.sidebar.subheader("Scatterplot Settings")
    	try:
    		x_values = st.sidebar.selectbox('X axis', options=numeric_columns)
    		y_values = st.sidebar.selectbox('Y axis', options=numeric_columns)
    		plot = px.scatter(data_frame=df, x=x_values, y=y_values)
    		# display the chart
    		st.plotly_chart(plot)
    	except Exception as e:
    			print(e)
    if chart_select == 'Lineplots':
    	st.sidebar.subheader("Line Plot Settings")
    	try:
    		x_values = st.sidebar.selectbox('X axis', options=numeric_columns)
    		y_values = st.sidebar.selectbox('Y axis', options=numeric_columns)
    		plot = px.line(data_frame=df, x=x_values, y=y_values)
    		st.plotly_chart(plot)
    	except Exception as e:
    		print(e)
    if chart_select == 'Histogram':
    	st.sidebar.subheader("Histogram Settings")
    	try:
    		x = st.sidebar.selectbox('Feature', options=numeric_columns)
    		bin_size = st.sidebar.slider("Number of Bins", min_value=10,max_value=100, value=40)
    		plot = px.histogram(x=x, data_frame=df)
    		st.plotly_chart(plot)

    	except Exception as e:
    		print(e)
    
            




if mode == 'About':
    image="https://media0.giphy.com/media/qgQUggAC3Pfv687qPC/giphy.gif?cid=ecf05e470wgv5b611qr3pjvwgp5es1awjc8fx6r26nwskudc&rid=giphy.gif&ct=g"
    st.image(image)
    st.title("Group-6")
    st.header('Team Members')
    st.write("* *Umesh karnam*")
    st.write("* *Shaik Huda*")
    st.write("* *Lalith kumar*")
    st.write("* *MD nasir*")
    st.header('Mentor/Guided By')
    st.write("* **ExcelR Project Team**")



if __name__ == '__user_input_features__':
    user_input_features()
	

 